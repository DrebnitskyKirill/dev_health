"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationService = void 0;
const nodemailer_1 = __importDefault(require("nodemailer"));
const models_1 = require("../models");
class NotificationService {
    constructor() {
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.transporter = nodemailer_1.default.createTransport({
            host: process.env.SMTP_HOST,
            port: parseInt(process.env.SMTP_PORT || '587'),
            secure: false, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
            auth: {
                user: process.env.SMTP_USER,
                pass: process.env.SMTP_PASS,
            },
        });
    }
    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async sendEmail(notification) {
        try {
            const mailOptions = {
                from: process.env.SMTP_FROM,
                to: notification.to,
                subject: notification.subject,
                html: notification.html,
                text: notification.text || this.htmlToText(notification.html),
            };
            const result = await this.transporter.sendMail(mailOptions);
            console.log('Email sent successfully:', result.messageId);
            return true;
        }
        catch (error) {
            console.error('Error sending email:', error);
            return false;
        }
    }
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HTML –≤ —Ç–µ–∫—Å—Ç –¥–ª—è fallback
    htmlToText(html) {
        return html
            .replace(/<[^>]*>/g, '')
            .replace(/&nbsp;/g, ' ')
            .replace(/&amp;/g, '&')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&quot;/g, '"')
            .trim();
    }
    // –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    static getTemplates() {
        return {
            welcome: {
                subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevHealth! üéâ',
                html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2563eb;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevHealth!</h2>
            <p>–ü—Ä–∏–≤–µ—Ç! üëã</p>
            <p>–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ª—é–¥–µ–π, –∑–∞–±–æ—Ç—è—â–∏—Ö—Å—è –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.</p>
            <h3 style="color: #059669;">–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</h3>
            <ul>
              <li>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å–∞–Ω–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
              <li>üëÅÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–≤–∏–ª–µ 20-20-20 –¥–ª—è –∑—Ä–µ–Ω–∏—è</li>
              <li>‚è∞ –¢–∞–π–º–µ—Ä –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã</li>
              <li>üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
              <li>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è</li>
            </ul>
            <p>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å–∞–Ω–∫–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑—Ä–µ–Ω–∏—è!</p>
            <div style="text-align: center; margin: 30px 0;">
              <a href="http://localhost:3000" style="background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>
            </div>
            <p style="color: #6b7280; font-size: 14px;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ DevHealth</p>
          </div>
        `,
            },
            achievement: {
                subject: 'üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
                html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #f59e0b;">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!</h2>
            <p>–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ DevHealth!</p>
            <div style="background-color: #fef3c7; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #92400e; margin-top: 0;">üèÜ {achievementName}</h3>
              <p style="color: #92400e; margin-bottom: 0;">{achievementDescription}</p>
            </div>
            <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!</p>
            <div style="text-align: center; margin: 30px 0;">
              <a href="http://localhost:3000/profile" style="background-color: #f59e0b; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>
            </div>
            <p style="color: #6b7280; font-size: 14px;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ DevHealth</p>
          </div>
        `,
            },
            dailyReminder: {
                subject: 'üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #059669;">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ</h2>
            <p>–ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ–≥–æ–¥–Ω—è:</p>
            <div style="background-color: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #065f46; margin-top: 0;">üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</h3>
              <ul style="color: #065f46;">
                <li>üßç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å–∞–Ω–∫—É –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º</li>
                <li>üëÅÔ∏è –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è –∑—Ä–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç</li>
                <li>‚è∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–π–º–µ—Ä –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã</li>
                <li>üíß –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É</li>
                <li>üö∂ –î–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è</li>
              </ul>
            </div>
            <p>–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!</p>
            <div style="text-align: center; margin: 30px 0;">
              <a href="http://localhost:3000" style="background-color: #059669; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>
            </div>
            <p style="color: #6b7280; font-size: 14px;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ DevHealth</p>
          </div>
        `,
            },
            weeklyReport: {
                subject: 'üìä –í–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ',
                html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #7c3aed;">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ</h2>
            <p>–í–æ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é:</p>
            <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #374151; margin-top: 0;">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–µ–ª–∏:</h3>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <div style="text-align: center;">
                  <div style="font-size: 24px; font-weight: bold; color: #2563eb;">{healthScore}</div>
                  <div style="color: #6b7280;">–û—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è</div>
                </div>
                <div style="text-align: center;">
                  <div style="font-size: 24px; font-weight: bold; color: #059669;">{level}</div>
                  <div style="color: #6b7280;">–£—Ä–æ–≤–µ–Ω—å</div>
                </div>
                <div style="text-align: center;">
                  <div style="font-size: 24px; font-weight: bold; color: #f59e0b;">{sessionsCompleted}</div>
                  <div style="color: #6b7280;">–°–µ—Å—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                </div>
                <div style="text-align: center;">
                  <div style="font-size: 24px; font-weight: bold; color: #dc2626;">{remindersShown}</div>
                  <div style="color: #6b7280;">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–∫–∞–∑–∞–Ω–æ</div>
                </div>
              </div>
            </div>
            <p>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.</p>
            <div style="text-align: center; margin: 30px 0;">
              <a href="http://localhost:3000/profile" style="background-color: #7c3aed; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏</a>
            </div>
            <p style="color: #6b7280; font-size: 14px;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ DevHealth</p>
          </div>
        `,
            },
        };
    }
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ email
    async sendWelcomeEmail(user) {
        const template = NotificationService.getTemplates().welcome;
        return this.sendEmail({
            to: user.email,
            subject: template.subject,
            html: template.html,
        });
    }
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    async sendAchievementEmail(user, achievementName, achievementDescription) {
        const template = NotificationService.getTemplates().achievement;
        const html = template.html
            .replace('{achievementName}', achievementName)
            .replace('{achievementDescription}', achievementDescription);
        return this.sendEmail({
            to: user.email,
            subject: template.subject,
            html: html,
        });
    }
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    async sendDailyReminder(user) {
        const template = NotificationService.getTemplates().dailyReminder;
        return this.sendEmail({
            to: user.email,
            subject: template.subject,
            html: template.html,
        });
    }
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    async sendWeeklyReport(user, stats) {
        const template = NotificationService.getTemplates().weeklyReport;
        const html = template.html
            .replace('{healthScore}', stats.healthScore.toString())
            .replace('{level}', stats.level.toString())
            .replace('{sessionsCompleted}', stats.sessionsCompleted.toString())
            .replace('{remindersShown}', stats.remindersShown.toString());
        return this.sendEmail({
            to: user.email,
            subject: template.subject,
            html: html,
        });
    }
    // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    async sendBulkEmail(templateKey, customData) {
        try {
            const users = await models_1.User.findAll();
            const template = NotificationService.getTemplates()[templateKey];
            if (!template) {
                throw new Error(`Template ${templateKey} not found`);
            }
            let html = template.html;
            if (customData) {
                Object.entries(customData).forEach(([key, value]) => {
                    html = html.replace(new RegExp(`{${key}}`, 'g'), value);
                });
            }
            let sent = 0;
            let failed = 0;
            for (const user of users) {
                const success = await this.sendEmail({
                    to: user.email,
                    subject: template.subject,
                    html: html,
                });
                if (success) {
                    sent++;
                }
                else {
                    failed++;
                }
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            return {
                total: users.length,
                sent,
                failed,
            };
        }
        catch (error) {
            console.error('Error sending bulk email:', error);
            return {
                total: 0,
                sent: 0,
                failed: 0,
            };
        }
    }
}
exports.NotificationService = NotificationService;
